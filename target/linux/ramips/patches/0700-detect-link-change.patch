Index: linux-3.10.14/drivers/net/raeth/Kconfig
===================================================================
--- linux-3.10.14.orig/drivers/net/raeth/Kconfig	2016-01-08 14:07:32.000000000 +0800
+++ linux-3.10.14/drivers/net/raeth/Kconfig	2016-07-04 23:34:36.000000000 +0800
@@ -4,6 +4,10 @@
         ---help---
           This driver supports Ralink gigabit ethernet family of
           adapters.
+config RALINK_DETECT_LINK
+        bool "detect link change"
+        ---help---
+          This driver supports detecting link change and send msg to user space using netlink
 
 config PDMA_NEW
         bool
Index: linux-3.10.14/drivers/net/raeth/raether.c
===================================================================
--- linux-3.10.14.orig/drivers/net/raeth/raether.c	2016-07-04 23:32:32.056568129 +0800
+++ linux-3.10.14/drivers/net/raeth/raether.c	2016-07-04 23:35:13.000000000 +0800
@@ -60,6 +60,86 @@
 int working_schedule;
 #endif
 
+#if defined (CONFIG_RALINK_DETECT_LINK)
+#define NETLINK_USER 31
+static struct sock *nl_raeth_detect = NULL;
+static DECLARE_COMPLETION(detect_link_change_comp);
+static DEFINE_SEMAPHORE(detect_link_change_mutex);
+static char link_change_msg[128] = {0};
+const static char *expect_msg="detect link change";
+
+static void detect_nl_recv_msg(struct sk_buff *skb) {
+        struct nlmsghdr *nlh;
+        int pid;
+        struct sk_buff *skb_out;
+        int msg_size;
+        int res;
+
+        if (down_interruptible(&detect_link_change_mutex)) {
+            return;
+        }
+        //printk(KERN_INFO "Entering: %s\n", __FUNCTION__);
+
+        nlh=(struct nlmsghdr*)skb->data;
+        //printk(KERN_INFO "Netlink received msg payload:%s\n",(char*)nlmsg_data(nlh));
+        if (0 != memcmp((char*)nlmsg_data(nlh), expect_msg, strlen(expect_msg))) {
+            /* this is not expected message */
+            up(&detect_link_change_mutex);
+            return;
+        }
+        pid = nlh->nlmsg_pid;
+
+        wait_for_completion_interruptible(&detect_link_change_comp);
+        
+        msg_size=strlen(link_change_msg);
+        skb_out = nlmsg_new(msg_size,0);
+
+        if(!skb_out)
+        {
+                printk(KERN_ERR "Failed to allocate new skb\n");
+                up(&detect_link_change_mutex);
+                return;
+        }
+        nlh=nlmsg_put(skb_out,0,0,NLMSG_DONE,msg_size,0);
+        NETLINK_CB(skb_out).dst_group = 0;
+        strncpy(nlmsg_data(nlh),link_change_msg,msg_size);
+
+        res=nlmsg_unicast(nl_raeth_detect,skb_out,pid);
+
+        if(res<0) {
+                printk(KERN_INFO "Error while sending bak to user\n");
+        }
+        up(&detect_link_change_mutex);
+}
+
+static int raeth_detect_init(void) {
+        //struct netlink_kernel_cfg cfg;
+        printk("Entering: %s\n",__FUNCTION__);
+       
+        struct netlink_kernel_cfg cfg = {
+        //cfg = 
+        //{       
+                .input = detect_nl_recv_msg,
+        };
+
+        nl_raeth_detect = netlink_kernel_create(&init_net, NETLINK_USER, &cfg);
+        //nl_raeth_detect = netlink_kernel_create(&init_net, NETLINK_USER, 0, hello_nl_recv_msg,NULL,THIS_MODULE);
+        if(!nl_raeth_detect)
+        {
+                printk(KERN_ALERT "Error creating socket.\n");
+                return -10;
+        }
+
+        return 0;
+}
+
+static void raeth_detect_exit(void) {
+	printk("Entering: %s\n",__FUNCTION__);
+	netlink_kernel_release(nl_raeth_detect);
+}
+#endif
+
+
 #ifdef CONFIG_RAETH_NAPI
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)
 static int raeth_clean(struct napi_struct *napi, int budget);
@@ -1979,6 +2059,15 @@
 #endif    
     if(reg_val & 0x1) {
 	printk("ESW: Link Status Changed - Port%d Link UP\n", port_no);
+#if defined (CONFIG_RALINK_DETECT_LINK)
+	//sprintf(temp_str, "%d link up", port_no); // can not use sprintf in interrupt
+	memset(link_change_msg, 0, sizeof(link_change_msg) / sizeof(link_change_msg[0]));
+	memcpy(link_change_msg, expect_msg, strlen(expect_msg));
+	link_change_msg[strlen(expect_msg)] = ' ';
+	link_change_msg[strlen(expect_msg) + 1] = port_no + '0';
+	memcpy(link_change_msg + strlen(expect_msg) + 2, " up", strlen(" up"));
+	complete(&detect_link_change_comp);
+#endif
 
 #if defined (CONFIG_WAN_AT_P0)
 	if(port_no==0) {
@@ -1991,7 +2080,14 @@
 #endif
     } else {	    
 	printk("ESW: Link Status Changed - Port%d Link Down\n", port_no);
-
+#if defined (CONFIG_RALINK_DETECT_LINK)
+	    memset(link_change_msg, 0, sizeof(link_change_msg) / sizeof(link_change_msg[0]));
+	    memcpy(link_change_msg, expect_msg, strlen(expect_msg));
+	    link_change_msg[strlen(expect_msg)] = ' ';
+	    link_change_msg[strlen(expect_msg) + 1] = port_no + '0';
+	    memcpy(link_change_msg + strlen(expect_msg) + 2, " down", strlen(" down"));
+	    complete(&detect_link_change_comp);
+#endif
     }
 }
 #endif
@@ -5994,7 +6090,9 @@
 		return -ENXIO;
 	}
 
-
+#if defined (CONFIG_RALINK_DETECT_LINK)
+    raeth_detect_init();
+#endif
 #ifdef CONFIG_RAETH_NETLINK
 	csr_netlink_init();
 #endif
@@ -6249,6 +6347,9 @@
 #ifdef CONFIG_RAETH_NETLINK
 	csr_netlink_end();
 #endif
+#if defined (CONFIG_RALINK_DETECT_LINK)
+    raeth_detect_exit();
+#endif
 }
 
 __attribute__((optimize("O0"))) inline void sysRegWrite(unsigned int phys, unsigned int val)
